import React, { createContext, useContext, useState, useEffect } from 'react';

interface LanguageContextProps {
  language: string;
  setLanguage: (language: string) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextProps>({
  language: 'en',
  setLanguage: () => {},
  t: (key: string) => key,
});

interface LanguageProviderProps {
  children: React.ReactNode;
}

const translations = {
  en: {
    dashboard: "Dashboard",
    users: "Users",
    products: "Products",
    orders: "Orders",
    categories: "Categories",
    settings: "Settings",
    logout: "Logout",
    search: "Search",
    name: "Name",
    email: "Email",
    role: "Role",
    location: "Location",
    phone: "Phone",
    address: "Address",
    city: "City",
    country: "Country",
    postalCode: "Postal Code",
    update: "Update",
    add: "Add",
    edit: "Edit",
    delete: "Delete",
    save: "Save",
    cancel: "Cancel",
    submit: "Submit",
    title: "Title",
    description: "Description",
    price: "Price",
    quantity: "Quantity",
    category: "Category",
    image: "Image",
    status: "Status",
    orderDate: "Order Date",
    total: "Total",
    customer: "Customer",
    productName: "Product Name",
    farmer: "Farmer",
    buyer: "Buyer",
    admin: "Admin",
    farmerRole: "Farmer",
    buyerRole: "Buyer",
    pending: "Pending",
    shipped: "Shipped",
    delivered: "Delivered",
    cancelled: "Cancelled",
    english: "English",
    arabic: "Arabic",
    selectLanguage: "Select Language",
    welcome: "Welcome",
    aboutUs: "About Us",
    contact: "Contact",
    services: "Services",
    browseProducts: "Browse Products",
    addToCart: "Add to Cart",
    viewProduct: "View Product",
    cropManagement: "Crop Management",
    orderTracking: "Order Tracking",
    availableCrops: "Available Crops",
    currentOrders: "Current Orders",
    pastOrders: "Past Orders",
    currency: "USD",
    orderHistory: "Order History",
    quantityNeeded: "Quantity Needed",
    kilograms: "Kilograms",
    confirmOrder: "Confirm Order",
    paymentDetails: "Payment Details",
    cardNumber: "Card Number",
    expiryDate: "Expiry Date",
    cvv: "CVV",
    placeOrder: "Place Order",
    orderConfirmation: "Order Confirmation",
    thankYou: "Thank You",
    orderReceived: "Your order has been received",
    continueShopping: "Continue Shopping",
    purchaseAnalytics: "Purchase Analytics",
    pendingOrders: "Pending Orders",
    wallet: "Wallet",
    walletManagement: "Wallet Management",
    currentBalance: "Current Balance",
    topUpNow: "Top Up Now",
    withdraw: "Withdraw",
    transactionHistory: "Transaction History",
    transactionType: "Transaction Type",
    amount: "Amount",
    transactionDate: "Transaction Date",
    profileManagement: "Profile Management",
    cancelOrder: "Cancel Order",
    markAsShipped: "Mark as Shipped",
    markAsDelivered: "Mark as Delivered",
    uploadDeliveryImages: "Upload Delivery Images",
  },
  ar: {
    dashboard: "لوحة التحكم",
    users: "المستخدمون",
    products: "المنتجات",
    orders: "الطلبات",
    categories: "الفئات",
    settings: "الإعدادات",
    logout: "تسجيل الخروج",
    search: "بحث",
    name: "الاسم",
    email: "البريد الإلكتروني",
    role: "الدور",
    location: "الموقع",
    phone: "الهاتف",
    address: "العنوان",
    city: "المدينة",
    country: "الدولة",
    postalCode: "الرمز البريدي",
    update: "تحديث",
    add: "إضافة",
    edit: "تعديل",
    delete: "حذف",
    save: "حفظ",
    cancel: "إلغاء",
    submit: "إرسال",
    title: "العنوان",
    description: "الوصف",
    price: "السعر",
    quantity: "الكمية",
    category: "الفئة",
    image: "الصورة",
    status: "الحالة",
    orderDate: "تاريخ الطلب",
    total: "المجموع",
    customer: "العميل",
    productName: "اسم المنتج",
    farmer: "المزارع",
    buyer: "المشتري",
    admin: "مدير",
    farmerRole: "مزارع",
    buyerRole: "مشتري",
    pending: "قيد الانتظار",
    shipped: "تم الشحن",
    delivered: "تم التوصيل",
    cancelled: "ملغى",
    english: "الإنجليزية",
    arabic: "العربية",
    selectLanguage: "اختر اللغة",
    welcome: "مرحبا",
    aboutUs: "معلومات عنا",
    contact: "اتصل بنا",
    services: "خدمات",
    browseProducts: "تصفح المنتجات",
    addToCart: "أضف إلى السلة",
    viewProduct: "عرض المنتج",
    cropManagement: "إدارة المحاصيل",
    orderTracking: "تتبع الطلبات",
    availableCrops: "المحاصيل المتاحة",
    currentOrders: "الطلبات الحالية",
    pastOrders: "الطلبات السابقة",
    currency: "دولار",
    orderHistory: "سجل الطلبات",
    quantityNeeded: "الكمية المطلوبة",
    kilograms: "كيلوغرام",
    confirmOrder: "تأكيد الطلب",
    paymentDetails: "تفاصيل الدفع",
    cardNumber: "رقم البطاقة",
    expiryDate: "تاريخ الانتهاء",
    cvv: "CVV",
    placeOrder: "تأكيد الطلب",
    orderConfirmation: "تأكيد الطلب",
    thankYou: "شكرا لك",
    orderReceived: "تم استلام طلبك",
    continueShopping: "متابعة التسوق",
    purchaseAnalytics: "تحليلات الشراء",
    pendingOrders: "الطلبات المعلقة",
    wallet: "المحفظة",
    walletManagement: "إدارة المحفظة",
    currentBalance: "الرصيد الحالي",
    topUpNow: "اشحن الآن",
    withdraw: "سحب",
    transactionHistory: "سجل المعاملات",
    transactionType: "نوع المعاملة",
    amount: "المبلغ",
    transactionDate: "تاريخ المعاملة",
    profileManagement: "إدارة الملف الشخصي",
    cancelOrder: "إلغاء الطلب",
    markAsShipped: "تم الشحن",
    markAsDelivered: "تأكيد الاستلام",
    uploadDeliveryImages: "تحميل صور التسليم",
  },
};

export const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {
  const [language, setLanguage] = useState(localStorage.getItem('language') || 'en');

  useEffect(() => {
    localStorage.setItem('language', language);
  }, [language]);

  const t = (key: string) => {
    return translations[language as keyof typeof translations][key] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => useContext(LanguageContext);
